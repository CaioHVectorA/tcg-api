// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Card {
  name       String
  id         Int          @id @default(autoincrement())
  card_id    String       @unique
  image_url  String
  rarity     Int // 1: common, 2: rare, 3: epic, 4: legendary, 5: full legendary
  Cards_user Cards_user[]
  Trade_Card Trade_Card[]
}

model Package {
  price                 Int
  id                    Int             @id @default(autoincrement())
  common_rarity         Float
  rare_rarity           Float
  epic_rarity           Float
  legendary_rarity      Float
  full_legendary_rarity Float
  name                  String
  image_url             String
  cards_quantity        Int
  Packages_User         Packages_User[]
  createdAt             DateTime        @default(now())
  updatedAt             DateTime        @default(now()) @updatedAt

  @@map("packages")
}

model Packages_User {
  id        Int      @id @default(autoincrement())
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  Package   Package  @relation(fields: [packageId], references: [id], onDelete: Cascade)
  packageId Int
  opened    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@map("packages_user")
}

model Cards_user {
  id        Int      @id @default(autoincrement())
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  Card      Card     @relation(fields: [cardId], references: [id], onDelete: Cascade)
  cardId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@map("cards_user")
}

model User {
  id            Int             @id @default(autoincrement())
  username      String
  password      String
  email         String
  Packages_User Packages_User[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @default(now()) @updatedAt
  money         Int             @default(500)
  Cards_user    Cards_user[]
  Trade_User    User_Trade[]
  friendships   Friend_User[]   @relation("UserFriends")
  friendOf      Friend_User[]   @relation("UserIsFriendOf")

  @@map("users")
}

model Trade {
  id         Int          @id @default(autoincrement())
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @default(now()) @updatedAt
  cards      Trade_Card[]
  userTrades User_Trade[] // max 2 - 1 sender, 2? receiver

  @@map("trades")
}

model User_Trade {
  id        Int      @id @default(autoincrement())
  user_id   Int
  trade_id  Int
  is_sender Boolean
  User      User     @relation(fields: [user_id], references: [id])
  Trade     Trade    @relation(fields: [trade_id], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Trade_Card {
  id        Int      @id @default(autoincrement())
  card_id   Int
  is_sender Boolean
  trade_id  Int
  Trade     Trade    @relation(fields: [trade_id], references: [id])
  Card      Card     @relation(fields: [card_id], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Friend_User {
  id        Int      @id @default(autoincrement())
  user_id   Int
  accepted  Boolean  @default(false)
  friend_id Int
  User      User     @relation("UserFriends", fields: [user_id], references: [id])
  Friend    User     @relation("UserIsFriendOf", fields: [friend_id], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  userId    Int?

  @@unique([user_id, friend_id])
}
